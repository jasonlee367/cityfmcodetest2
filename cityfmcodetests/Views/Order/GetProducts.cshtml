@using cityfmcodetests.Models
@model IEnumerable<ProductsViewModels>
@{
	ViewBag.Title = "Order Page";
}
<head>
	<style>
		tr:nth-child(even) {
			background-color: #f2f2f2;
		}
	</style>
</head>

<h2>@ViewBag.Title</h2>
<div class="row">
	<div class="col-md-8 form-group">
		<section id="GetProductsForm">
			@using (Html.BeginForm("GetProducts", "Order", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
			{
				@Html.AntiForgeryToken()
				<h4>Please choose a product and submit an order.</h4>
				<hr />
				<table class="table">
					<thead>
						<tr>
							<th>@Html.LabelFor(m => m.FirstOrDefault().Name, new { @class = "col-md-3 control-label" })</th>
							<th>@Html.LabelFor(m => m.FirstOrDefault().Description, new { @class = "col-md-3 control-label" })</th>
							<th>
								@Html.LabelFor(m => m.FirstOrDefault().UnitPrice, new { @class = "col-md-3 control-label" })
							<select id="fixRate-select" asp-for="User.fixRateCode" class="form-control" style=" margin-left:10px;font-size:15px;font-family: 'Open Sans' , sans-serif;font-weight: bold;">
								<option value="">-- Select Branch --</option>
								@foreach (var rate in Enum.GetValues(typeof(cityfmcodetests.Models.Currency)))
								{
									<option value="@rate">@rate.ToString()</option>
								}
							</select>
						</th>
						<th>@Html.LabelFor(m => m.FirstOrDefault().OrderQuantity, new { @class = "col-md-3 control-label" })</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model)
					{
						item.UnitPrice = item.UnitPrice * 1.2;
					<tr>
						<td>@Html.DisplayFor(modelItem => item.Name)</td>
						<td>@Html.DisplayFor(modelItem => item.Description)</td>
						<td align="right" id="@item.ProductId" class="dynamicPrice">@Html.DisplayFor(modelItem => item.UnitPrice)</td>
						@Html.Hidden($"hiddenPrice_{@item.ProductId}", @item.UnitPrice, new { @class = "hiddenPrice" })
						<td align="right">
							@Html.TextBoxFor(modelItem => item.OrderQuantity, new { @class = "numberonly pmtallocated pull-right form-control", @dir = "rtl", style = "width:70px", @maxlength = "5", id = $"OrderQuantity_{ item.ProductId}" })
						</td>
						<td align="right" class="productOption">@Html.CheckBox($"chkProduct_{item.ProductId}", false, new { value = item.ProductId })</td>
					</tr>
					}
				</tbody>
			</table>

			<div class="form-group">
				<div class="col-md-offset-2 col-md-10">
					<input id="btnSubmit" type="submit" value="Submit Order" class="btn btn-default" />
				</div>
			</div>

		}
		</section>
	</div>

</div>

@section Scripts {
	<script>
		$(document).ready(function () {
			$('#fixRate-select option:selected').remove();
			$('#fixRate-select').val('AUD').select();
			var previous;
			$("#fixRate-select").on('focus', function () {
				// Store the current value on focus and on change
				previous = this.value;
			});

			$('#fixRate-select').change(function () {
				$.ajax({
					type: "GET",
					url: '@Url.Action("GetFixRate")',
					data: { NewCurrency: $(this).val(), OldCurrency: previous },
					dataType: 'text',
					success: function (data) {
						calculateRate(data);
					},
					error: function (ex) {
						alert("Error while getting rates" + ex.responseText);
					}
				});
				return false;
			});

			$('.numberonly').keypress(function (e) {
				var charCode = (e.which) ? e.which : event.keyCode
				if (String.fromCharCode(charCode).match(/[^0-9]/g))
					return false;
			});

			$('.numberonly').blur(function (e) {
				if ($.trim($(this).val()) != '') {
					return $(this).val(parseInt($(this).val()));
				}
				else {
					$(this).val('0').select();
				}
			});

			$("#btnSubmit").click(function () {
				//must select at least one product
				if ($('input:checkbox').filter(':checked').length < 1) {
					alert("Please select at least one product");
					$('input:checkbox')[0].select();
					return false;
				}
				else {
					//textbox must enter a integer more than 0 if product is selected
					let boolNext = false;
					let checkedValue = "";
					$('input[type=checkbox]').each(function () {
						const checkbox = $(this).find('input[type="checkbox"]');
						checkedValue = $(this).val();
						if ($(this).is(":checked") && parseInt($('#OrderQuantity_' + checkedValue).val()) <= 0) {
							boolNext = true;
							return false;
						}
					});
					if (boolNext) {
						alert("Please enter number more than zero for selected product!");
						$('#OrderQuantity_' + checkedValue).select();
						return false;
					}
				}
			});
		});

		function calculateRate(data) {
			alert("Fix rate is changed to " + $('#fixRate-select').val())
			let arrayRate = data.toString().split(",");
			for (let i = 0; i < arrayRate.length; i++) {
				$('.hiddenPrice').each(function () {
					let lastRate = $(this).val();
					$(this).val(parseFloat(parseFloat(lastRate).toFixed(2) * parseFloat(arrayRate[i]).toFixed(2)).toFixed(3));
				});
			}
			$('.dynamicPrice').each(function () {
				let id = $(this).attr("id");
				$(this).text(parseFloat($('#hiddenPrice_' + id).val()).toFixed(2));
			});
		}
	</script>
}
